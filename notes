System design :
  Dns resolutions:
    actually dns holds the ip addresses and domain name like ip address of amazon and amazon
    so whenever your are requesting to a server, it mean u r not requesting to server u are requesting to dns and dns gives u the ip address and your are searching the ip address not the name.
  vertical scaling:
    increasing your resources like cpu ram is know to be vertical scaling.
    increasing or adding more resoures to your single processor or machine
    drawback in vertical scaling:
      it takes down time to add up resources, down time mean the server will be down to add up the resources because you cannot add the cpu or ram while running.
  horizontal scaling:
    to avoid down time we will use horizontal scaling which incearses the servers not add up the resources to one server 
    as the users inceases we will increase the servers but here every server as a different ip address so the dns gives the first server ip to the users so whats the point in different servers when you cant redirect 
    users to other servers.
  to solve this we have "load balancer";
  Load balancer:
    we create a load balancer and give its ip address to dns now when ever the users searches for the amazon he will get the load balancer the load balancer will redirect the user to server based on algorithms.
    when ever you add a server you have register it on load balancer it will check if the srver is healthy or not meaning it works for atleast a minute, is it able to handle traffic.
    This the intelligence of load balancer.
    "In amazon they call it ELB elastic load balancer.
    even load balancer can crash but they get the best resources.

  API gateway:
    An API gateway acts as a single entry point for handling client requests to one or more backend services, often used in microservices architectures..
    consider we are having different applications or services like:
      auth
      orders
      payments
      etc...
    we have different servers for each of them so for that we create a load balancer for them and connect the load balancer to "router"
    "router is nothing but API gateway" this api gateway directs to different services's load balancer and there individual load balancer decides to redirect 
    to there respective server.....
    The server are known to be ec2 machines elastic commmute in amazon terminolgy we call it vm machines

    So in services or ec machines we microservices like payments we interact with gmail stating that you have done the payment
    here consider you set it in sync manner itialize the payment let the iser receive gmail and process but it is not an efficient way so we have queue form 
    we give it in queue form which works in async manner in amazon we call sqs.
    now how do we pick my from queue?
    we have two methods:
      push: we push it from payments to gmail.
      pull: the gmail takes it from payments.
      in amazon we use sqs so it is pull mechanism.
      we have short pull and long pull so short pull(high cost and high api call) is for every second and long pull is for every 10 seconds.
